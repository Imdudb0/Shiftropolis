name: Release

on:
  push:                                                             tags:
      - 'v*.*.*'
  workflow_dispatch:                                                inputs:
      version:
        description: 'Version à releaser (ex: v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Marquer comme pre-release'
        required: false                                                 type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:                                                             prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
          if [[ "$VERSION" == *"alpha"* || "$VERSION" == *"beta"* || "$VERSION" == *"rc"* ]]; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi
        fi

        echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "tag=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

        echo "🏷️ Version: $VERSION" >> $GITHUB_STEP_SUMMARY
        echo "🔖 Tag: $VERSION" >> $GITHUB_STEP_SUMMARY
        echo "🚧 Pre-release: $IS_PRERELEASE" >> $GITHUB_STEP_SUMMARY

  build-android-release:
    name: Build Android Release
    runs-on: ubuntu-latest
    needs: prepare-release

    strategy:
      matrix:
        target:
          - armv7-linux-androideabi
          # - aarch64-linux-android  # Ajoutez d'autres targets si nécessaire
          # - i686-linux-android

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK & NDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        target: google_apis
        arch: x86_64

    - name: Install Android NDK
      run: |
        sdkmanager "ndk;25.2.9519653"
        echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cargo-apk
      run: cargo install cargo-apk

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: release-${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Update version in Cargo.toml
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml

        # Vérifier le changement
        grep "version = " Cargo.toml

    - name: Setup Android build environment
      run: |
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/25.2.9519653
        export NDK_HOME=$ANDROID_NDK_ROOT
        export CC_armv7_linux_androideabi="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"
        export CXX_armv7_linux_androideabi="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang++"
        export AR_armv7_linux_androideabi="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        export CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER="$CC_armv7_linux_androideabi"
        export RUSTFLAGS="-C link-arg=-Wl,--no-rosegment"

        # Sauvegarder pour les étapes suivantes
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV
        echo "CC_armv7_linux_androideabi=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
        echo "CXX_armv7_linux_androideabi=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang++" >> $GITHUB_ENV
        echo "AR_armv7_linux_androideabi=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
        echo "CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
        echo "RUSTFLAGS=-C link-arg=-Wl,--no-rosegment" >> $GITHUB_ENV

    - name: Build optimized release APK
      run: |
        # Build avec profil release optimisé
        cargo apk build --release --target ${{ matrix.target }}

    - name: Sign APK (if keystore available)
      if: env.ANDROID_KEYSTORE_BASE64 != ''
      env:
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      run: |
        # Décoder le keystore
        echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > release.keystore

        APK_PATH="target/${{ matrix.target }}/release/apk/sme-arena-game.apk"
        SIGNED_APK_PATH="target/${{ matrix.target }}/release/apk/sme-arena-game-signed.apk"

        # Signer l'APK
        jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 \
          -keystore release.keystore \
          -storepass "$ANDROID_KEYSTORE_PASSWORD" \
          -keypass "$ANDROID_KEY_PASSWORD" \
          "$APK_PATH" \
          "$ANDROID_KEY_ALIAS"

        # Aligner l'APK
        zipalign -v 4 "$APK_PATH" "$SIGNED_APK_PATH"

        echo "✅ APK signé: $SIGNED_APK_PATH"

    - name: Generate release artifacts info
      run: |
        APK_PATH="target/${{ matrix.target }}/release/apk/sme-arena-game.apk"
        SIGNED_APK_PATH="target/${{ matrix.target }}/release/apk/sme-arena-game-signed.apk"

        if [ -f "$SIGNED_APK_PATH" ]; then
          APK_TO_ANALYZE="$SIGNED_APK_PATH"
          APK_TYPE="signed"
        else
          APK_TO_ANALYZE="$APK_PATH"
          APK_TYPE="unsigned"
        fi

        APK_SIZE=$(du -h "$APK_TO_ANALYZE" | cut -f1)
        APK_SIZE_BYTES=$(du -b "$APK_TO_ANALYZE" | cut -f1)
        SO_PATH="target/${{ matrix.target }}/release/libsme_arena_game.so"
        SO_SIZE=$(du -h "$SO_PATH" | cut -f1 2>/dev/null || echo "N/A")

        # Créer un fichier d'informations
        cat > release_info_${{ matrix.target }}.md << EOF
        # 📱 SME Arena ${{ needs.prepare-release.outputs.tag }}

        **Target:** ${{ matrix.target }}
        **APK Type:** $APK_TYPE
        **APK Size:** $APK_SIZE ($APK_SIZE_BYTES bytes)
        **Native Library:** $SO_SIZE
        **Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        **Commit:** ${{ github.sha }}

        ## 📋 APK Contents
        \`\`\`
        $(unzip -l "$APK_TO_ANALYZE" | head -15)
        \`\`\`

        ## 🔧 Build Configuration
        - **Rust Version:** $(rustc --version)
        - **Cargo APK:** $(cargo apk --version)
        - **Android NDK:** $ANDROID_NDK_ROOT
        - **Optimization:** Release + LTO
        EOF

        # Ajouter au summary GitHub
        cat release_info_${{ matrix.target }}.md >> $GITHUB_STEP_SUMMARY

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sme-arena-${{ needs.prepare-release.outputs.tag }}-${{ matrix.target }}
        path: |
          target/${{ matrix.target }}/release/apk/*.apk
          target/${{ matrix.target }}/release/lib*.so
          release_info_${{ matrix.target }}.md
        retention-days: 90

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-android-release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./release-artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets

        # Copier tous les APKs et renommer avec des noms clairs
        for target_dir in release-artifacts/sme-arena-*/; do
          target=$(basename "$target_dir" | sed 's/sme-arena-${{ needs.prepare-release.outputs.tag }}-//')

          # Copier l'APK signé s'il existe, sinon l'APK normal
          if [ -f "$target_dir/sme-arena-game-signed.apk" ]; then
            cp "$target_dir/sme-arena-game-signed.apk" "release-assets/sme-arena-${{ needs.prepare-release.outputs.tag }}-${target}-signed.apk"
          elif [ -f "$target_dir/sme-arena-game.apk" ]; then
            cp "$target_dir/sme-arena-game.apk" "release-assets/sme-arena-${{ needs.prepare-release.outputs.tag }}-${target}.apk"
          fi

          # Copier les infos de build
          if [ -f "$target_dir/release_info_${target}.md" ]; then
            cp "$target_dir/release_info_${target}.md" "release-assets/"
          fi
        done

        ls -la release-assets/

    - name: Generate changelog
      id: changelog
      run: |
        # Générer le changelog depuis les commits
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        if [ -n "$PREVIOUS_TAG" ]; then
          echo "📋 Changements depuis $PREVIOUS_TAG:" > changelog.md
          echo "" >> changelog.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> changelog.md
        else
          echo "🎉 Première release de SME Arena!" > changelog.md
          echo "" >> changelog.md
          echo "- Génération procédurale d'arènes 3D" >> changelog.md
          echo "- Système de mutations SME avec difficulté progressive" >> changelog.md
          echo "- Contrôles tactiles optimisés pour Android" >> changelog.md
          echo "- Interface utilisateur responsive avec effets visuels" >> changelog.md
          echo "- Physique 3D avec Bevy et Rapier" >> changelog.md
        fi

        # Ajouter les infos techniques
        echo "" >> changelog.md
        echo "## 📱 Informations techniques" >> changelog.md
        echo "" >> changelog.md
        for info_file in release-assets/release_info_*.md; do
          if [ -f "$info_file" ]; then
            echo "### $(basename "$info_file" .md)" >> changelog.md
            cat "$info_file" >> changelog.md
            echo "" >> changelog.md
          fi
        done

        # Définir la variable pour la prochaine étape
        echo "changelog_path=changelog.md" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare-release.outputs.tag }}
        name: "SME Arena ${{ needs.prepare-release.outputs.tag }}"
        body_path: changelog.md
        draft: false
        prerelease: ${{ needs.prepare-release.outputs.is_prerelease }}
        files: |
          release-assets/*.apk
          release-assets/*.md
        fail_on_unmatched_files: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [prepare-release, create-github-release]
    if: always()

    steps:
    - name: Success notification
      if: needs.create-github-release.result == 'success'
      run: |
        echo "🎉 **Release ${{ needs.prepare-release.outputs.tag }} créée avec succès!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📱 **Téléchargements:**" >> $GITHUB_STEP_SUMMARY
        echo "- APK Android ARMv7: [Télécharger](https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔧 **Installation:**" >> $GITHUB_STEP_SUMMARY
        echo "1. Téléchargez l'APK sur votre appareil Android" >> $GITHUB_STEP_SUMMARY
        echo "2. Activez 'Sources inconnues' dans les paramètres" >> $GITHUB_STEP_SUMMARY
        echo "3. Installez l'APK" >> $GITHUB_STEP_SUMMARY
        echo "4. Profitez du jeu!" >> $GITHUB_STEP_SUMMARY

    - name: Failure notification
      if: needs.create-github-release.result == 'failure'
      run: |
        echo "❌ **Échec de création de la release ${{ needs.prepare-release.outputs.tag }}**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Vérifiez les logs de build pour plus de détails." >> $GITHUB_STEP_SUMMARY

  post-release-tasks:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [prepare-release, create-github-release]
    if: needs.create-github-release.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version for next development cycle
      run: |
        CURRENT_VERSION="${{ needs.prepare-release.outputs.version }}"

        # Incrémenter la version patch pour le développement
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}

        NEXT_PATCH=$((PATCH + 1))
        NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH-dev"

        # Mettre à jour Cargo.toml
        sed -i "s/^version = \".*\"/version = \"$NEXT_VERSION\"/" Cargo.toml

        # Créer un commit de développement
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add Cargo.toml
        git commit -m "chore: bump version to $NEXT_VERSION for development"
        git push origin main

        echo "🔄 Version mise à jour vers $NEXT_VERSION pour le développement" >> $GITHUB_STEP_SUMMARY

    - name: Create milestone for next version
      uses: actions/github-script@v6
      with:
        script: |
          const version = "${{ needs.prepare-release.outputs.version }}";
          const versionParts = version.split('.');
          const nextMinorVersion = `${versionParts[0]}.${parseInt(versionParts[1]) + 1}.0`;

          try {
            await github.rest.issues.createMilestone({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `v${nextMinorVersion}`,
              description: `Milestone pour la version ${nextMinorVersion}`,
              state: 'open'
            });

            console.log(`Milestone v${nextMinorVersion} créé`);
          } catch (error) {
            console.log(`Milestone v${nextMinorVersion} existe déjà ou erreur:`, error.message);
          }
