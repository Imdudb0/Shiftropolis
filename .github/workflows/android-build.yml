name: Android Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-android:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target: [armv7-linux-androideabi]
        build-type: [debug, release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        target: google_apis
        arch: x86_64

    - name: Install Android NDK
      run: |
        sdkmanager "ndk;25.2.9519653"
        echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cargo-apk
      run: cargo install cargo-apk

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Setup Android environment
      run: |
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/25.2.9519653
        export NDK_HOME=$ANDROID_NDK_ROOT
        export CC_armv7_linux_androideabi="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"
        export CXX_armv7_linux_androideabi="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang++"
        export AR_armv7_linux_androideabi="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        export CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER="$CC_armv7_linux_androideabi"
        export RUSTFLAGS="-C link-arg=-Wl,--no-rosegment"

        # Sauvegarder dans GITHUB_ENV pour les √©tapes suivantes
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV
        echo "NDK_HOME=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV
        echo "CC_armv7_linux_androideabi=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
        echo "CXX_armv7_linux_androideabi=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang++" >> $GITHUB_ENV
        echo "AR_armv7_linux_androideabi=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
        echo "CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
        echo "RUSTFLAGS=-C link-arg=-Wl,--no-rosegment" >> $GITHUB_ENV

    - name: Build Android APK (Debug)
      if: matrix.build-type == 'debug'
      run: |
        cargo apk build --target ${{ matrix.target }}

    - name: Build Android APK (Release)
      if: matrix.build-type == 'release'
      run: |
        cargo apk build --release --target ${{ matrix.target }}

    - name: Analyze APK size
      run: |
        if [ "${{ matrix.build-type }}" == "release" ]; then
          APK_PATH="target/${{ matrix.target }}/release/apk/sme-arena-game.apk"
        else
          APK_PATH="target/${{ matrix.target }}/debug/apk/sme-arena-game.apk"
        fi

        if [ -f "$APK_PATH" ]; then
          APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
          echo "üì¶ APK Size (${{ matrix.build-type }}): $APK_SIZE" >> $GITHUB_STEP_SUMMARY

          # Analyse d√©taill√©e pour release
          if [ "${{ matrix.build-type }}" == "release" ]; then
            unzip -l "$APK_PATH" | head -20 >> apk_contents.txt
            echo "üìã APK Contents:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 apk_contents.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
        fi

    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sme-arena-${{ matrix.target }}-${{ matrix.build-type }}
        path: |
          target/${{ matrix.target }}/${{ matrix.build-type }}/apk/*.apk
          target/${{ matrix.target }}/${{ matrix.build-type }}/lib*.so
        retention-days: 30

    - name: Create GitHub Release
      if: github.event_name == 'release' && matrix.build-type == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: target/${{ matrix.target }}/release/apk/sme-arena-game.apk
        tag_name: ${{ github.ref_name }}
        name: SME Arena ${{ github.ref_name }}
        body: |
          üéÆ SME Arena - Survival Mutations Engine

          **Android APK pour ARMv7**

          üî• **Nouvelles fonctionnalit√©s:**
          - G√©n√©ration proc√©durale d'ar√®nes 3D
          - Syst√®me de mutations SME
          - Contr√¥les tactiles optimis√©s
          - Interface utilisateur responsive

          üì± **Installation:**
          1. T√©l√©chargez le fichier APK
          2. Activez "Sources inconnues" sur Android
          3. Installez l'APK
          4. Profitez du jeu !

          ‚ö†Ô∏è **Pr√©requis:** Android 8.0+ (API 26)
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-android:
    runs-on: ubuntu-latest
    needs: build-android
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download APK
      uses: actions/download-artifact@v4
      with:
        name: sme-arena-armv7-linux-androideabi-debug
        path: ./apk

    - name: Setup Android Emulator
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        script: |
          echo "ü§ñ √âmulateur Android d√©marr√©"
          adb install ./apk/sme-arena-game.apk

          # Lancer l'app et v√©rifier qu'elle d√©marre
          adb shell am start -n com.sme_arena_game/.MainActivity
          sleep 5

          # V√©rifier que l'app tourne
          if adb shell pidof com.sme_arena_game > /dev/null; then
            echo "‚úÖ Application d√©marr√©e avec succ√®s"
          else
            echo "‚ùå √âchec du d√©marrage de l'application"
            exit 1
          fi

          # Capturer quelques logs
          timeout 10 adb logcat | grep "sme_arena" || true

  performance-analysis:
    runs-on: ubuntu-latest
    needs: build-android
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Download Release APK
      uses: actions/download-artifact@v4
      with:
        name: sme-arena-armv7-linux-androideabi-release
        path: ./release-apk

    - name: Analyze APK Performance
      run: |
        APK_PATH="./release-apk/sme-arena-game.apk"

        if [ -f "$APK_PATH" ]; then
          # Taille totale
          TOTAL_SIZE=$(du -h "$APK_PATH" | cut -f1)

          # D√©compresser et analyser
          unzip -q "$APK_PATH" -d temp_apk/

          # Taille des assets principaux
          NATIVE_SIZE=$(du -sh temp_apk/lib/ 2>/dev/null | cut -f1 || echo "N/A")
          ASSETS_SIZE=$(du -sh temp_apk/assets/ 2>/dev/null | cut -f1 || echo "N/A")

          # Cr√©er le rapport
          cat << EOF > performance_report.md
          # üìä Rapport de Performance APK

          ## üì¶ Tailles
          - **APK Total:** $TOTAL_SIZE
          - **Biblioth√®ques natives:** $NATIVE_SIZE
          - **Assets:** $ASSETS_SIZE

          ## üîç Analyse d√©taill√©e
          \`\`\`
          $(unzip -l "$APK_PATH" | head -20)
          \`\`\`

          ## üìà Recommandations
          $([ "$TOTAL_SIZE" \> "50M" ] && echo "‚ö†Ô∏è APK > 50MB - Consid√©rer l'optimisation" || echo "‚úÖ Taille APK acceptable")
          EOF

          # Ajouter au summary GitHub
          cat performance_report.md >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload Performance Report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance_report.md
        retention-days: 90
