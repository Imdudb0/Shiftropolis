name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev pkg-config

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check code formatting
      run: cargo fmt -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run unit tests
      run: cargo test --lib --bins

    - name: Run integration tests
      run: cargo test --test '*'

    - name: Build for desktop (validation)
      run: cargo build --release --features desktop

  validate-android-setup:
    name: Validate Android Configuration
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev pkg-config

    - name: Install Rust with Android target
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: armv7-linux-androideabi

    - name: Install cargo-apk
      run: cargo install cargo-apk

    - name: Validate Cargo.toml Android config
      run: |
        # Vérifier que les métadonnées Android sont présentes
        if ! grep -q "package.metadata.android" Cargo.toml; then
          echo "❌ Métadonnées Android manquantes dans Cargo.toml"
          exit 1
        fi

        # Vérifier les dépendances Android critiques
        if ! grep -q "bevy.*android-game-activity" Cargo.toml; then
          echo "❌ Support Android manquant pour Bevy"
          exit 1
        fi

        echo "✅ Configuration Android validée"

    - name: Check Android compilation (dry-run)
      run: |
        # Test de compilation sans build complet pour Android
        # Utiliser --no-default-features pour éviter les dépendances desktop
        cargo check --target armv7-linux-androideabi --no-default-features --features android

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev pkg-config

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Check for known vulnerabilities
      run: |
        # Créer un rapport de sécurité
        cargo audit --format json > security_report.json || true

        if [ -s security_report.json ]; then
          echo "⚠️ Vulnérabilités détectées - voir security_report.json"
          cat security_report.json
        else
          echo "✅ Aucune vulnérabilité connue détectée"
        fi

    - name: Upload security report
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security_report.json
        retention-days: 30

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev pkg-config

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Run arena generation benchmarks
      run: |
        # Benchmark de génération d'arène
        cargo build --release --bin sme-arena-game

        # Créer un script de test de performance
        cat > perf_test.rs << 'EOF'
        use std::time::Instant;
        use sme_arena_game::generation::ArenaGenerator;
        use sme_arena_game::monitoring::AnomalyMonitor;

        fn main() {
            let mut total_time = 0.0;
            let test_count = 10;

            for i in 0..test_count {
                let start = Instant::now();

                let mut generator = ArenaGenerator::new(Some(i));
                let mut monitor = AnomalyMonitor::new();

                match generator.generate_with_monitoring(12, 3, &mut monitor) {
                    Ok(_) => {
                        let elapsed = start.elapsed().as_secs_f64();
                        total_time += elapsed;
                        println!("Arena {}: {:.3}s", i, elapsed);
                    }
                    Err(e) => {
                        println!("Failed arena {}: {}", i, e);
                    }
                }
            }

            let avg_time = total_time / test_count as f64;
            println!("\n📊 Performance Results:");
            println!("Average generation time: {:.3}s", avg_time);
            println!("Total time: {:.3}s", total_time);

            // Écrire les résultats pour GitHub
            std::fs::write("benchmark_results.txt", format!(
                "Average arena generation: {:.3}s\nTotal time for {} arenas: {:.3}s",
                avg_time, test_count, total_time
            )).unwrap();
        }
        EOF

        # Note: Ce benchmark nécessiterait que le code soit organisé en bibliothèque
        echo "🔧 Benchmark setup prepared (requires library structure)"

    - name: Archive benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results.txt
        retention-days: 90

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev pkg-config

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate code coverage
      run: |
        cargo llvm-cov --html --output-dir coverage
        cargo llvm-cov --lcov --output-path coverage.lcov

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: coverage.lcov
        fail_ci_if_error: false
        verbose: true

    - name: Upload coverage HTML
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage
        path: coverage/
        retention-days: 30

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev pkg-config

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Generate documentation
      run: |
        cargo doc --no-deps --document-private-items

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        destination_dir: docs

  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [test, validate-android-setup, security-audit]
    if: always()

    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.validate-android-setup.result == 'success' && needs.security-audit.result == 'success'
      run: |
        echo "✅ Tous les tests sont passés!" >> $GITHUB_STEP_SUMMARY
        echo "🚀 Le code est prêt pour le build Android" >> $GITHUB_STEP_SUMMARY

    - name: Notify failure
      if: needs.test.result == 'failure' || needs.validate-android-setup.result == 'failure' || needs.security-audit.result == 'failure'
      run: |
        echo "❌ Certains tests ont échoué" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Config Android: ${{ needs.validate-android-setup.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Sécurité: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY